import { ConfirmInstall } from './utils';
export * from './utils/confirm';
/**
 * Returned by {@link rustbinCheck}
 *
 * @property satisfies - true if the binary version satisfies the library
 * version range
 * @property libVersion - the library version range
 * @property binVersion - the binary version (if it is not defined then the
 * binary was either not found or the version output could not be parsed)
 */
export declare type RustbinCheckReturn = {
    satisfies: boolean;
    libVersion: string;
    binVersion?: string;
};
/**
 * Returned by {@link rustbinMatch}
 *
 * @property cmd - the command to install the binary (empty if no install is
 * needed)
 * @property libVersion - the library version range
 * @property binVersion - the binary version (if it is not defined then the
 * binary was either not found or the version output could not be parsed)
 * @property fullPathToBinary - the full path to the installed binary
 */
export declare type RustbinMatchReturn = {
    cmd?: string;
    libVersion: string;
    binVersion?: string;
    fullPathToBinary: string;
};
/**
 * Configures how rustbin checks/matches the installed binary
 * with the installed library.
 *
 * @property rootDir - the directory where `cargo install` will place the install metadata files and the binary below
 * `./bin`
 * @property binaryName - the name of the binary executable to check/install
 * @property binaryCrateName - the name of the binary on crates.io
 * @property binaryVersionFlag - the flag to pass to the binary to have it print the version string
 * @property binaryVersionRx - a regex to extract the version from the binary version output string
 * @property libName - the name of the matching installed library
 * @property cargoToml - the path to the Cargo.toml file in which the version of the library is defined
 * @property versionRangeFallback - the binary version/range to use if the one
 * matching the lib version is not installable. This should be used with care
 * as this could result in an incompatible version to be installed.
 * @property locked - if `true` a `--locked` flag is passed to `cargo install`
 * @property dryRun - if true, the binary will not be installed even if it is necessary
 */
export declare type RustbinConfig = {
    rootDir: string;
    binaryName: string;
    binaryCrateName?: string;
    binaryVersionFlag?: string;
    binaryVersionRx?: RegExp;
    libName: string;
    versionRangeFallback?: string;
    cargoToml: string;
    locked?: boolean;
    dryRun?: boolean;
};
/**
 * Queries version of the installed binary.
 *
 * @returns version of the installed binary or `undefined` if the binary was
 * not found or the version string could not be parsed
 */
export declare function rustbinVersion(fullPathToBinary: string, binaryVersionFlag?: string, binaryVersionRx?: RegExp): Promise<string | undefined>;
/**
 * Checks if the installed binary matches the installed library.
 *
 * @returns result of check including if the binary version satisfies the
 * library version range
 */
export declare function rustbinCheck(config: RustbinConfig): Promise<RustbinCheckReturn>;
/**
 * Checks if the installed binary matches the installed library.
 * If not it attempts to install the latest binary matching the library version
 * range via `cargo install`.
 *
 * @returns result including the `cmd` used to install the binary (if it was
 * necessary), the full path to said binary and the installed version of it
 */
export declare function rustbinMatch(config: RustbinConfig, confirmInstall?: ConfirmInstall): Promise<RustbinMatchReturn>;
