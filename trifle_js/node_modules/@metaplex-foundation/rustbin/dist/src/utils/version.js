"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installArgs = exports.binarySatisfies = exports.getBinaryVersion = exports.versionRx = void 0;
const child_process_1 = require("child_process");
const satisfies_1 = __importDefault(require("semver/functions/satisfies"));
const fs_1 = require("./fs");
const log_1 = require("./log");
/** @private */
exports.versionRx = /([0-9]+\.[0-9]+\.[0-9]+)(?:-[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?:\+[0-9A-Za-z-]+)?/;
/** @private */
async function getBinaryVersion(fullPathToBinary, binaryVersionFlag, binaryVersionRx) {
    const versionCmd = `${fullPathToBinary} ${binaryVersionFlag}`;
    const { stdout, stderr, error } = (0, child_process_1.spawnSync)(fullPathToBinary, [
        binaryVersionFlag,
    ]);
    if (error) {
        (0, log_1.logError)(`Error running ${versionCmd}: ${error}`);
        throw error;
    }
    const output = `${stdout.toString()}${stderr.toString()}`;
    (0, log_1.logDebug)(`versionCmd: ${versionCmd} ->\n${output}`);
    const match = output.match(binaryVersionRx);
    return { binVersion: match == null ? undefined : match[0], output };
}
exports.getBinaryVersion = getBinaryVersion;
/** @private */
async function binarySatisfies(fullPathToBinary, binaryVersionFlag, binaryVersionRx, libVersionRange) {
    if (!(await (0, fs_1.canAccess)(fullPathToBinary))) {
        (0, log_1.logInfo)(`Cannot access ${fullPathToBinary} thus will need to install the first time`);
        return { binVersion: undefined, satisfies: false };
    }
    const { binVersion, output } = await getBinaryVersion(fullPathToBinary, binaryVersionFlag, binaryVersionRx);
    if (binVersion == null) {
        (0, log_1.logError)(`Unable to extract version from ${output} will require reinstall`);
        return { binVersion: undefined, satisfies: false };
    }
    return {
        binVersion,
        satisfies: (0, satisfies_1.default)(binVersion, libVersionRange),
    };
}
exports.binarySatisfies = binarySatisfies;
/** @private */
function installArgs(binaryCrateName, libVersionRange, locked, rootDir) {
    return [
        'install',
        binaryCrateName,
        '--version',
        libVersionRange,
        ...(locked ? ['--locked'] : []),
        '--force',
        '--root',
        rootDir,
    ];
}
exports.installArgs = installArgs;
//# sourceMappingURL=version.js.map