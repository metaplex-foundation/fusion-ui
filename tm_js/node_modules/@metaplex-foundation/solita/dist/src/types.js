"use strict";
// Currently a limited version of the types found inside https://github.com/project-serum/anchor/blob/master/ts/src/idl.ts
// Will be extended to include the full spec eventually. At this point only cases actually encountered in contracts were
// addressed
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROGRAM_ID_EXPORT_NAME = exports.PROGRAM_ID_PACKAGE = exports.SOLANA_SPL_TOKEN_EXPORT_NAME = exports.SOLANA_WEB3_EXPORT_NAME = exports.BEET_SOLANA_EXPORT_NAME = exports.BEET_EXPORT_NAME = exports.SOLANA_SPL_TOKEN_PACKAGE = exports.SOLANA_WEB3_PACKAGE = exports.BEET_SOLANA_PACKAGE = exports.BEET_PACKAGE = exports.hasPaddingAttr = exports.isIdlInstructionAccountWithDesc = exports.isShankIdlInstruction = exports.isShankIdl = exports.isIdlDefinedType = exports.isIdlTypeScalarEnum = exports.isIdlTypeDataEnum = exports.isIdlTypeEnum = exports.isIdlTypeDefined = exports.asIdlTypeArray = exports.isIdlTypeArray = exports.isIdlTypeVec = exports.isIdlTypeOption = exports.IDL_FIELD_ATTR_PADDING = void 0;
const assert_1 = require("assert");
exports.IDL_FIELD_ATTR_PADDING = 'padding';
// -----------------
// Guards
// -----------------
function isIdlTypeOption(ty) {
    return ty.option != null;
}
exports.isIdlTypeOption = isIdlTypeOption;
function isIdlTypeVec(ty) {
    return ty.vec != null;
}
exports.isIdlTypeVec = isIdlTypeVec;
function isIdlTypeArray(ty) {
    return ty.array != null;
}
exports.isIdlTypeArray = isIdlTypeArray;
function asIdlTypeArray(ty) {
    (0, assert_1.strict)(isIdlTypeArray(ty));
    return ty;
}
exports.asIdlTypeArray = asIdlTypeArray;
function isIdlTypeDefined(ty) {
    return ty.defined != null;
}
exports.isIdlTypeDefined = isIdlTypeDefined;
function isIdlTypeEnum(ty) {
    return ty.variants != null;
}
exports.isIdlTypeEnum = isIdlTypeEnum;
function isIdlTypeDataEnum(ty) {
    const dataEnum = ty;
    return (dataEnum.variants != null &&
        dataEnum.variants.length > 0 &&
        dataEnum.variants[0].fields != null);
}
exports.isIdlTypeDataEnum = isIdlTypeDataEnum;
function isIdlTypeScalarEnum(ty) {
    return isIdlTypeEnum(ty) && !isIdlTypeDataEnum(ty);
}
exports.isIdlTypeScalarEnum = isIdlTypeScalarEnum;
function isIdlDefinedType(ty) {
    return ty.fields != null;
}
exports.isIdlDefinedType = isIdlDefinedType;
function isShankIdl(ty) {
    var _a;
    return ((_a = ty.metadata) === null || _a === void 0 ? void 0 : _a.origin) === 'shank';
}
exports.isShankIdl = isShankIdl;
function isShankIdlInstruction(ty) {
    return typeof ty.discriminant === 'object';
}
exports.isShankIdlInstruction = isShankIdlInstruction;
function isIdlInstructionAccountWithDesc(ty) {
    return typeof ty.desc === 'string';
}
exports.isIdlInstructionAccountWithDesc = isIdlInstructionAccountWithDesc;
function hasPaddingAttr(field) {
    return field.attrs != null && field.attrs.includes(exports.IDL_FIELD_ATTR_PADDING);
}
exports.hasPaddingAttr = hasPaddingAttr;
// -----------------
// Packages
// -----------------
exports.BEET_PACKAGE = '@metaplex-foundation/beet';
exports.BEET_SOLANA_PACKAGE = '@metaplex-foundation/beet-solana';
exports.SOLANA_WEB3_PACKAGE = '@solana/web3.js';
exports.SOLANA_SPL_TOKEN_PACKAGE = '@solana/spl-token';
exports.BEET_EXPORT_NAME = 'beet';
exports.BEET_SOLANA_EXPORT_NAME = 'beetSolana';
exports.SOLANA_WEB3_EXPORT_NAME = 'web3';
exports.SOLANA_SPL_TOKEN_EXPORT_NAME = 'splToken';
exports.PROGRAM_ID_PACKAGE = '<program-id>';
exports.PROGRAM_ID_EXPORT_NAME = '<program-id-export>';
//# sourceMappingURL=types.js.map